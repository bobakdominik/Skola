@page "/"
@page "/login"
@using medicinska_informatika_SP.Data.Models
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using medicinska_informatika_SP.Data
@layout LoginLayout
@attribute [AllowAnonymous]
@inject SignInManager<Employee> SignInMgr
@inject UserManager<Employee> UserMgr
@inject NavigationManager NavMgr
@inject IRoleService RoleService;


<form @onsubmit="Submit" @onsubmit:preventDefault>
    <h1 class="h3 mb-3 font-weight-normal">Login</h1>
    <div class="input-group mb-2">
        <div class="input-group-prepend">
            <div class="input-group-text">
                <svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" width="16" height="16" viewBox="0 0 30 30" style=" fill:#000000;">
                    <path d="M18,19v-2c0.45-0.223,1.737-1.755,1.872-2.952c0.354-0.027,0.91-0.352,1.074-1.635c0.088-0.689-0.262-1.076-0.474-1.198 c0,0,0.528-1.003,0.528-2.214c0-2.428-0.953-4.5-3-4.5c0,0-0.711-1.5-3-1.5c-4.242,0-6,2.721-6,6c0,1.104,0.528,2.214,0.528,2.214 c-0.212,0.122-0.562,0.51-0.474,1.198c0.164,1.283,0.72,1.608,1.074,1.635C10.263,15.245,11.55,16.777,12,17v2c-1,3-9,1-9,8h24 C27,20,19,22,18,19z"></path>
                </svg>
            </div>
        </div>
        <input type="text" @bind="Model.UserName" class="form-control" placeholder="Username" required>
    </div>
    <div class="input-group">
        <div class="input-group-prepend">
            <div class="input-group-text" style="width:42px;height:46px">
                <svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" width="16" height="16" viewBox="0 0 30 30" style=" fill:#000000;">
                    <path d="M 15 2 C 11.145666 2 8 5.1456661 8 9 L 8 11 L 6 11 C 4.895 11 4 11.895 4 13 L 4 25 C 4 26.105 4.895 27 6 27 L 24 27 C 25.105 27 26 26.105 26 25 L 26 13 C 26 11.895 25.105 11 24 11 L 22 11 L 22 9 C 22 5.2715823 19.036581 2.2685653 15.355469 2.0722656 A 1.0001 1.0001 0 0 0 15 2 z M 15 4 C 17.773666 4 20 6.2263339 20 9 L 20 11 L 10 11 L 10 9 C 10 6.2263339 12.226334 4 15 4 z M 15.044922 13 C 17.354922 13 18.880859 14.283438 18.880859 16.148438 C 18.879859 17.360438 18.291344 18.208906 17.152344 18.878906 C 16.078344 19.500906 15.779297 19.896875 15.779297 20.671875 L 15.779297 21 L 13.634766 21 L 13.621094 20.654297 C 13.516094 19.362297 13.961172 18.636422 15.076172 17.982422 C 16.118172 17.360422 16.433594 16.973656 16.433594 16.222656 C 16.433594 15.471656 15.818437 14.9375 14.898438 14.9375 C 13.969437 14.9375 13.357594 15.511391 13.308594 16.400391 L 13.308594 16.5 L 11.119141 16.5 L 11.119141 16.400391 C 11.159141 14.389391 12.565922 13 15.044922 13 z M 14.753906 22.5 C 15.574906 22.5 16.080078 22.976906 16.080078 23.753906 C 16.080078 24.522906 15.574906 25 14.753906 25 C 13.932906 25 13.419922 24.522906 13.419922 23.753906 C 13.419922 22.976906 13.932906 22.5 14.753906 22.5 z"></path>
                </svg>
            </div>
        </div>
        <input type="password" @bind="Model.Password" class="form-control" placeholder="Password" required>
    </div>
    <div class="checkbox mb-3">
        <label>
            <input type="checkbox" @bind="Model.RememberMe"> Remember me
        </label>
    </div>
    @if (!string.IsNullOrEmpty(Model.Error))
    {
        <div class="alert alert-danger mt-2 mb-2" role="alert">
           @Model.Error
        </div>
    }
    <button class="btn btn-lg btn-primary btn-block" type="submit">Sign in</button>
</form>

@code {
    private LoginModel<Employee> Model { get; set; } = new LoginModel<Employee>();

    private async Task Submit()
    {
        Model.Error = null;
        var usr = await UserMgr.FindByNameAsync(Model.UserName);
        if (usr == null)
        {
            Model.Error = "Login failed. Check your username and password.";
            return;
        }


        if (await SignInMgr.CanSignInAsync(usr))
        {
            var result = await SignInMgr.CheckPasswordSignInAsync(usr, Model.Password, true);
            if (result.Succeeded)
            {
                Guid key = BlazorCookieLoginMiddleware<Employee>.AnnounceLogin(Model);
                NavMgr.NavigateTo($"/login?key={key}", true);
            }
            else
            {
                Model.Error = "Login failed. Check your username and password.";
            }
        }
        else
        {
            Model.Error = "Your account is blocked";
        }
    }
}
